#!/usr/bin/env perl
use strict; use warnings;
use YAML ();
use Path::Tiny 'path';
use Test::PostgreSQL;
use Data::Dumper;
use App::Prove;

=head1 NAME

bin/test-wrapper - spin up a clean database and configuration for tests

=head1 USAGE

    bin/test-wrapper           # runs prove -r (recursive)
    bin/test-wrapper t/foo.t   # runs with prove -v (single test)

=cut

my $config = YAML::Load( path('conf/general.yml-example')->slurp );

warn "Spinning up a Pg cluster/database...\n";
my $pg = Test::PostgreSQL->new();

warn sprintf "# Connected to %s\n", $pg->dsn;

my $dbh = DBI->connect($pg->dsn);

$dbh->do( path('db/schema.sql')->slurp ) or die $!;
$dbh->do( path('db/alert_types.sql')->slurp ) or die $!;
$dbh->do( path('db/generate_secret.sql')->slurp ) or die $!;

$config->{FMS_DB_PORT} = $pg->port;
$config->{FMS_DB_NAME} = 'test';
$config->{FMS_DB_USER} = 'postgres';

my $config_file = 'general.test-autogenerated';
path("conf/$config_file.yml")->spew( YAML::Dump($config) );

local $ENV{FMS_OVERRIDE_CONFIG} = $config_file;

if (@ARGV and -e $ARGV[-1]) {
    unshift @ARGV, -f $ARGV[-1] ? '-v' : '-r';
}
else {
    push @ARGV, '-r', 't/';
}

my $prove = App::Prove->new;
$prove->process_args(@ARGV);
$prove->run;

